#ifndef ERDITS_H
#define ERDITS_H

#include "llvm/IR/Value.h"
#include <map>

using namespace llvm;

namespace ERDITS {
  enum CheckpointingPolicy {
    NoCheckpointing = 0,
    FunctionCheckhpointing,
    BasicBlockCheckpointing,
  };

  class Transformer {
    private:
      CheckpointingPolicy policy;                   // the transformation policy
      Module *Md;                                   // the module to transform
      std::set<Instruction *> safeStores;           // the set of store instructions that are safe (following a consistency check)
      std::set<BranchInst *> recoveryHandles;       // the set of branch instructions generated by the consistency checks
      std::map<Value *, Value *>
        DuplicatedInstructionMap; // map containing the instructions
                                  // and their duplicates

    public:
      Transformer() {};

      Transformer(CheckpointingPolicy policy, Module &Md) {
        this->policy = policy;
        this->Md = &Md;
      }

      void addRecoveryHandle(BranchInst &BI) {
        this->recoveryHandles.insert(&BI);
      }

      void addSafeStore(Instruction &I) {
        this->safeStores.insert(&I);
      }

      void transform() {
        // triplicate globals

        // triplicate function arguments

        // triplicate stores

        // insert recovery routine
      }
  }; 

};

#endif